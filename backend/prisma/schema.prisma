// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password            String?           // Optional for OAuth users
  name                String
  isActive            Boolean           @default(true)
  emailVerified       Boolean           @default(false)
  preferredAuthMethod String            @default("jwt") // jwt, oauth2, api_key
  lastLoginAt         DateTime?
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  
  // Relations
  oauthAccounts       OAuthAccount[]
  apiKeys             ApiKey[]
  refreshTokens       RefreshToken[]
  
  @@map("users")
}

model OAuthAccount {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  provider     String   // google, github, facebook, etc.
  providerId   String   @map("provider_id")
  accessToken  String?  @map("access_token") @db.Text
  refreshToken String?  @map("refresh_token") @db.Text
  expiresAt    DateTime? @map("expires_at")
  tokenType    String?  @map("token_type")
  scope        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model ApiKey {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  name        String
  description String?
  keyHash     String    @unique @map("key_hash")
  prefix      String    // First 8 chars for identification
  isActive    Boolean   @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int      @default(0)
  category    String?
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
