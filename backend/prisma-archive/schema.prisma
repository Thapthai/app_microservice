// Prisma Schema สำหรับ Archive Database
// ใช้ structure เดียวกับ Primary DB แต่ชี้ไป Archive DB

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/archive-client"
}

datasource db {
  provider = "mysql"
  url      = env("ARCHIVE_DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String?
  name                  String
  is_active             Boolean   @default(true)
  email_verified        Boolean   @default(false)
  preferred_auth_method String    @default("jwt")
  last_login_at         DateTime?
  
  firebase_uid           String?   @unique @map("firebase_uid")
  profile_picture        String?   @map("profile_picture")

  two_factor_enabled     Boolean   @default(false) @map("two_factor_enabled")
  two_factor_secret      String?   @map("two_factor_secret")
  backup_codes           String?   @map("backup_codes") @db.Text
  two_factor_verified_at DateTime? @map("two_factor_verified_at")

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  oauth_accounts    OAuthAccount[]
  api_keys          ApiKey[]
  refreshTokens     RefreshToken[]
  two_factor_tokens TwoFactorToken[]

  @@map("users")
}

model OAuthAccount {
  id            Int       @id @default(autoincrement())
  user_id       Int       @map("user_id")
  provider      String
  provider_id   String    @map("provider_id")
  access_token  String?   @map("access_token") @db.Text
  refresh_token String?   @map("refresh_token") @db.Text
  expires_at    DateTime? @map("expires_at")
  token_type    String?   @map("token_type")
  scope         String?
  created_at    DateTime  @default(now()) @map("created_at")
  updated_at    DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_id])
  @@map("oauth_accounts")
}

model ApiKey {
  id           Int       @id @default(autoincrement())
  user_id      Int       @map("user_id")
  name         String
  description  String?
  key_hash     String    @unique @map("key_hash")
  prefix       String
  is_active    Boolean   @default(true) @map("is_active")
  last_used_at DateTime? @map("last_used_at")
  expires_at   DateTime? @map("expires_at")
  created_at   DateTime  @default(now()) @map("created_at")
  updated_at   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int      @map("user_id")
  token      String   @unique
  expires_at DateTime @map("expires_at")
  is_revoked Boolean  @default(false) @map("is_revoked")
  created_at DateTime @default(now()) @map("created_at")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model TwoFactorToken {
  id         Int      @id @default(autoincrement())
  user_id    Int      @map("user_id")
  token      String
  type       String
  expires_at DateTime @map("expires_at")
  isUsed     Boolean  @default(false) @map("is_used")
  created_at DateTime @default(now()) @map("created_at")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, type])
  @@map("two_factor_tokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slug        String   @unique
  image       String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  items Item[]

  @@map("categories")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int      @default(0)
  category_id Int?     @map("category_id")
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  category Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("items")
}

